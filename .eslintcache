[{"C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\App.tsx":"1","C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\components\\DocTemplater\\index.tsx":"2","C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\index.tsx":"3","C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\resources\\templates\\pasteParsers.ts":"4","C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\resources\\templates\\templateModels.ts":"5"},{"size":148,"mtime":1609806512897,"results":"6","hashOfConfig":"7"},{"size":5170,"mtime":1609810706395,"results":"8","hashOfConfig":"7"},{"size":453,"mtime":1609806570221,"results":"9","hashOfConfig":"7"},{"size":1001,"mtime":1609809781812,"results":"10","hashOfConfig":"7"},{"size":555,"mtime":1609809969170,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v5xe53",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\App.tsx",[],"C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\components\\DocTemplater\\index.tsx",["24","25"],"import Docxtemplater from \"docxtemplater\";\nimport { saveAs } from \"file-saver\";\nimport PizZip from \"pizzip\";\nimport React, {\n  FC,\n  FormEvent,\n  SyntheticEvent,\n  useEffect,\n  useState,\n} from \"react\";\nimport {\n  Button,\n  DropdownProps,\n  Form,\n  Grid,\n  Input,\n  Select,\n  Table,\n} from \"semantic-ui-react\";\nimport pasteParsers from \"../../resources/templates/pasteParsers\";\nimport templateModels, {\n  ModelTemplateConfig,\n} from \"../../resources/templates/templateModels\";\n\nconst DocTemplater: FC = () => {\n  const loadFileAsBuffer = async (file: File) => {\n    return await new Promise<ArrayBuffer>((resolve) => {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", (e) => {\n        resolve(e.target?.result as ArrayBuffer);\n      });\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  async function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n\n    if (!modelFileSet) return;\n\n    const modelFileData = await loadFileAsBuffer(modelFileSet[0]);\n    const zip = new PizZip(modelFileData);\n    const doc = new Docxtemplater(zip);\n\n    // const csvDataFileContent = await loadFileAsText(dataFileSet[0]);\n    // const csvData = await neatCsv(String(csvDataFileContent));\n\n    for (const [index, row] of Array.from(itemsData.entries())) {\n      doc.setData({\n        ...row,\n      });\n\n      doc.render();\n\n      const out = doc.getZip().generate({\n        type: \"blob\",\n        mimeType:\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      }); //Output the document using Data-URI\n\n      const outFile = new File(\n        [out],\n        (modelTemplate?.outputFileNaming(row) || `doc_${index}`) + \".docx\"\n      );\n      saveAs(outFile);\n    }\n  }\n\n  const handleTemplateChange = (\n    e: SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    if (!data) return;\n    setModelTemplate(templateModels[String(data.value)]);\n    setModelTemplateName(String(data.value));\n  };\n\n  const handlePaste = () => {\n    document.body.focus();\n    navigator.clipboard.readText().then((text) => {\n      const data = pasteParsers.FFParser(text);\n      setItemsData([...itemsData, data]);\n    });\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const a = [...itemsData];\n    a.splice(index, 1);\n    setItemsData(a);\n  };\n\n  const [headerInput, setHeaderInput] = useState(\"\");\n  const [modelFileSet, setModelFileSet] = useState<FileList | null>(null);\n  const [itemsData, setItemsData] = useState<any[]>([]);\n  const [\n    modelTemplate,\n    setModelTemplate,\n  ] = useState<ModelTemplateConfig | null>(null);\n  const [modelTemplateName, setModelTemplateName] = useState<string | null>(\n    null\n  );\n\n  useEffect(() => {}, []);\n\n  return (\n    <Grid textAlign=\"center\" style={{ height: \"100vh\" }}>\n      <Grid.Column>\n        <Grid.Row>\n          <Grid.Column>\n            <Grid.Row>\n              <Grid.Column>\n                <Form onSubmit={handleSubmit}>\n                  <Input\n                    onChange={(e) =>\n                      e.currentTarget.files &&\n                      setModelFileSet(e.currentTarget.files)\n                    }\n                    placeholder=\"Escolha o documento modelo\"\n                    idFor=\"modelfile\"\n                    type=\"file\"\n                    accept=\".doc, .docx\"\n                    multiple={false}\n                  />\n                  <Button disabled={!modelFileSet} type=\"submit\">\n                    Gerar Documentos\n                  </Button>\n                </Form>\n              </Grid.Column>\n              <Grid.Column>\n                <Select\n                  onChange={handleTemplateChange}\n                  value={modelTemplateName || \"Selecione um modelo\"}\n                  placeholder=\"Selecione um modelo\"\n                  options={Object.keys(templateModels).map((e) => ({\n                    text: e,\n                    value: e,\n                  }))}\n                />\n\n                <Button onClick={() => handlePaste()}>Colar FF</Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row style={{ overflowX: \"scroll\", padding: \"0 1em\" }}>\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Ação</Table.HeaderCell>\n                {modelTemplate?.keys.map((header) => (\n                  <Table.HeaderCell key={header}>{header}</Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {itemsData.map((data, index) => (\n                <Table.Row key={index}>\n                  <Table.Cell>\n                    <Button onClick={() => handleDeleteItem(index)}>\n                      Deletar\n                    </Button>\n                  </Table.Cell>\n\n                  {modelTemplate?.keys.map((header) => (\n                    <Table.Cell key={header}>{data[header]}</Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Grid.Row>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default DocTemplater;\n","C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\index.tsx",[],["26","27"],"C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\resources\\templates\\pasteParsers.ts",[],"C:\\Users\\lucas\\workspace\\retentiva\\doc-template\\src\\resources\\templates\\templateModels.ts",[],{"ruleId":"28","severity":1,"message":"29","line":92,"column":10,"nodeType":"30","messageId":"31","endLine":92,"endColumn":21},{"ruleId":"28","severity":1,"message":"32","line":92,"column":23,"nodeType":"30","messageId":"31","endLine":92,"endColumn":37},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},"@typescript-eslint/no-unused-vars","'headerInput' is assigned a value but never used.","Identifier","unusedVar","'setHeaderInput' is assigned a value but never used.","no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-global-assign","no-unsafe-negation"]